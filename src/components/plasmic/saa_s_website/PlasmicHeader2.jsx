// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9n35eQz37vKHQeuCHXPHwo
// Component: k7o7R5KA05BDU1
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Button from "../../Button" // plasmic-import: FThbuefNiac0C/component
import { useScreenVariants as useScreenVariantsj0Zyv8Tr7BOtZ2 } from "./PlasmicGlobalVariant__Screen" // plasmic-import: j0Zyv8Tr7BOtZ2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_saa_s_website.module.css" // plasmic-import: 9n35eQz37vKHQeuCHXPHwo/projectcss
import * as sty from "./PlasmicHeader2.module.css" // plasmic-import: k7o7R5KA05BDU1/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2" // plasmic-import: PDTPUbgo_ErgN5/icon
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: vnsKZ-sNQjV5Km/icon

export const PlasmicHeader2__VariantProps = new Array()

export const PlasmicHeader2__ArgProps = new Array()

function PlasmicHeader2__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj0Zyv8Tr7BOtZ2(),
  })

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___3AVjE)}
      >
        {true ? (
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__uJcmj
            )}
            component={Link}
            href={"/"}
            platform={"gatsby"}
          >
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg___8AHlk)}
              role={"img"}
            />
          </p.PlasmicLink>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dsjzx)}
        >
          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__jtSbs
            )}
            component={Link}
            href={"/about-us"}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__gAxU2)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pgcWy
              )}
            >
              {"About Us"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__hsi7I)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__wtsUw
            )}
            component={Link}
            href={"/features"}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___5Ex5O)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vdOo
              )}
            >
              {"Features"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__nRoEf)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__ayey8
            )}
            component={Link}
            href={"/pricing"}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___5Eba)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__upikU
              )}
            >
              {"Pricing "}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__nKJt)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__c3Csm
            )}
            component={Link}
            href={"/contact"}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___4LhOh)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Px0K
              )}
            >
              {"Contact"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__inDtf)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___4Xgf
            )}
            component={Link}
            href={"/blog"}
            platform={"gatsby"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__q5IIz)}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xdazO
              )}
            >
              {"Blog"}
            </div>

            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__vpfCe)}
                role={"img"}
              />
            ) : null}
          </p.Stack>

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            shape={"rounded"}
          >
            {"Get started"}
          </Button>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader2__ArgProps,
          internalVariantPropNames: PlasmicHeader2__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicHeader2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader2"
  } else {
    func.displayName = `PlasmicHeader2.${nodeName}`
  }
  return func
}

export const PlasmicHeader2 = Object.assign(
  // Top-level PlasmicHeader2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHeader2
    internalVariantProps: PlasmicHeader2__VariantProps,
    internalArgProps: PlasmicHeader2__ArgProps,
  }
)

export default PlasmicHeader2
/* prettier-ignore-end */

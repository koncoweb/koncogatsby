// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9n35eQz37vKHQeuCHXPHwo
// Component: SWIuqyQJoFurIU
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import * as pp from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_saa_s_website.module.css" // plasmic-import: 9n35eQz37vKHQeuCHXPHwo/projectcss
import * as sty from "./PlasmicSelect__Option.module.css" // plasmic-import: SWIuqyQJoFurIU/css
import SUPER__PlasmicSelect from "./PlasmicSelect" // plasmic-import: lH6JvVeqWbwLZQ/render

export const PlasmicSelect__Option__VariantProps = new Array(
  "isSelected",
  "isHighlighted",
  "isDisabled"
)

export const PlasmicSelect__Option__ArgProps = new Array(
  "children",
  "value",
  "textValue"
)

function PlasmicSelect__Option__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  const superContexts = {
    Select: React.useContext(SUPER__PlasmicSelect.Context),
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),

          [sty.rootisHighlighted]: hasVariant(
            variants,
            "isHighlighted",
            "isHighlighted"
          ),

          [sty.rootisSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          ),
        }
      )}
    >
      <div
        data-plasmic-name={"labelContainer"}
        data-plasmic-override={overrides.labelContainer}
        className={classNames(projectcss.all, sty.labelContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Option",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenisHighlighted]: hasVariant(
              variants,
              "isHighlighted",
              "isHighlighted"
            ),

            [sty.slotTargetChildrenisSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            ),
          }),
        })}
      </div>
    </div>
  )
}

function useBehavior(props, ref) {
  return pp.useSelectOption(
    PlasmicSelect__Option,
    props,
    {
      isSelectedVariant: { group: "isSelected", variant: "isSelected" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      isHighlightedVariant: {
        group: "isHighlighted",
        variant: "isHighlighted",
      },

      labelSlot: "children",
      root: "root",
      labelContainer: "labelContainer",
    },

    ref
  )
}

const PlasmicDescendants = {
  root: ["root", "labelContainer"],
  labelContainer: ["labelContainer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSelect__Option__ArgProps,
          internalVariantPropNames: PlasmicSelect__Option__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicSelect__Option__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSelect__Option"
  } else {
    func.displayName = `PlasmicSelect__Option.${nodeName}`
  }
  return func
}

export const PlasmicSelect__Option = Object.assign(
  // Top-level PlasmicSelect__Option renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    // Metadata about props expected for PlasmicSelect__Option
    internalVariantProps: PlasmicSelect__Option__VariantProps,
    internalArgProps: PlasmicSelect__Option__ArgProps,
    useBehavior,
  }
)

export default PlasmicSelect__Option
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9n35eQz37vKHQeuCHXPHwo
// Component: pYgavYs7vQSJ7j
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: GiBoz5mPYbhbH5/component
import TextInput from "../../TextInput" // plasmic-import: 6KC2bgm4VSse6/component
import Checkbox from "../../Checkbox" // plasmic-import: L2k-RkkWzfKy4S/component
import Footer from "../../Footer" // plasmic-import: UCdzYIWgs-f8ml/component
import { useScreenVariants as useScreenVariantsj0Zyv8Tr7BOtZ2 } from "./PlasmicGlobalVariant__Screen" // plasmic-import: j0Zyv8Tr7BOtZ2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_saa_s_website.module.css" // plasmic-import: 9n35eQz37vKHQeuCHXPHwo/projectcss
import * as sty from "./PlasmicSignUp.module.css" // plasmic-import: pYgavYs7vQSJ7j/css
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: vnsKZ-sNQjV5Km/icon
import tiffanyTertipesNxcs8Wwj9J0Unsplashjpg7YXw56Ww6R9OSh from "./images/tiffanyTertipesNxcs8Wwj9J0Unsplashjpg.jpeg" // plasmic-import: 7YXw56Ww6R9oSh/picture
import stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgUS3MIzugi8OsL7 from "./images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpg.jpeg" // plasmic-import: uS3mIZUGI8OsL7/picture
import greenChameleonS9Cc2SKySjmUnsplashjpgMuyYbjUpLs1Eo from "./images/greenChameleonS9Cc2SKySjmUnsplashjpg.jpeg" // plasmic-import: -MuyYbjUpLS1Eo/picture

export const PlasmicSignUp__VariantProps = new Array()

export const PlasmicSignUp__ArgProps = new Array()

function PlasmicSignUp__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = args
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsj0Zyv8Tr7BOtZ2(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"pageBanner"}
              data-plasmic-override={overrides.pageBanner}
              className={classNames(projectcss.all, sty.pageBanner)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___2Zpq5)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__rAdNe)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__ec67J)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fXTdE)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Sign Up"}
                      </h1>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j71Zd
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                        }
                      </div>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__l7OeX)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___3LpxS)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "lazy"
                          : "lazy"
                      }
                      src={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              src: stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgUS3MIzugi8OsL7,
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined,
                            }
                          : {
                              src: tiffanyTertipesNxcs8Wwj9J0Unsplashjpg7YXw56Ww6R9OSh,
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined,
                            }
                      }
                    />
                  </div>
                </p.Stack>
              </div>
            </div>

            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div className={classNames(projectcss.all, sty.columns__nXRi)}>
                <div className={classNames(projectcss.all, sty.column__bqep0)}>
                  <div
                    data-plasmic-name={"container4"}
                    data-plasmic-override={overrides.container4}
                    className={classNames(projectcss.all, sty.container4)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Register"}
                    </h2>

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__sjIpY
                      )}
                    >
                      {"Name"}
                    </label>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__ddOL
                      )}
                      placeholder={" "}
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label___80Np0
                      )}
                    >
                      {"Email"}
                    </label>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__vz4DA
                      )}
                      placeholder={" "}
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__o40Q1
                      )}
                    >
                      {"Phone"}
                    </label>

                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__jJf4
                      )}
                      placeholder={" "}
                    />

                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qqW3
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "I understand that this form is \nstoring my submitted information \nso I can be contacted."
                          : "I understand that this form is storing"}
                      </div>
                    </Checkbox>

                    <p.Stack
                      as={p.PlasmicLink}
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                      component={Link}
                      platform={"gatsby"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__cTzdL)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5GCeY
                        )}
                      >
                        {"Send Now"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__o44Cq)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__vs6Nc)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__mdvQe)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: greenChameleonS9Cc2SKySjmUnsplashjpgMuyYbjUpLs1Eo,
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined,
                    }}
                  />
                </div>
              </div>
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "mainSection",
    "pageBanner",
    "h1",
    "mainSection2",
    "container4",
    "h2",
    "checkbox",
    "link",
    "footer",
  ],

  header: ["header"],
  mainSection: [
    "mainSection",
    "pageBanner",
    "h1",
    "mainSection2",
    "container4",
    "h2",
    "checkbox",
    "link",
  ],

  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  mainSection2: ["mainSection2", "container4", "h2", "checkbox", "link"],
  container4: ["container4", "h2", "checkbox", "link"],
  h2: ["h2"],
  checkbox: ["checkbox"],
  link: ["link"],
  footer: ["footer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignUp__ArgProps,
          internalVariantPropNames: PlasmicSignUp__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUp"
  } else {
    func.displayName = `PlasmicSignUp.${nodeName}`
  }
  return func
}

export const PlasmicSignUp = Object.assign(
  // Top-level PlasmicSignUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    mainSection: makeNodeComponent("mainSection"),
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    mainSection2: makeNodeComponent("mainSection2"),
    container4: makeNodeComponent("container4"),
    h2: makeNodeComponent("h2"),
    checkbox: makeNodeComponent("checkbox"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicSignUp
    internalVariantProps: PlasmicSignUp__VariantProps,
    internalArgProps: PlasmicSignUp__ArgProps,
  }
)

export default PlasmicSignUp
/* prettier-ignore-end */
